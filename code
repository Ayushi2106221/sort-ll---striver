class Solution {
public:
ListNode* findmid(ListNode *head){
    ListNode * slow=head;
    ListNode *fast=head->next;
    while(fast != NULL && fast -> next != NULL){
        fast=fast->next;
        fast=fast->next;
        slow=slow->next;
    }
    return slow;
}
ListNode *merge(ListNode *left, ListNode *right){
    if(left==NULL) return right;
    if(right==NULL) return left;
    ListNode *ans=new ListNode(-1);
    ListNode *temp=ans;
    while(left!=NULL && right!=NULL){
        if(left->val<=right->val){
            temp->next=left;
            
            left=left->next;

        }
        else{
            temp->next=right;
           
            right=right->next;
        }
        temp=temp->next;
    }

    while(left!=NULL){
        temp->next=left;
            temp=left;
            left=left->next;
    }
    while(right!=NULL){
        temp->next=right;
            temp=right;
            right=right->next;
    }
    ListNode *t=ans->next;
    delete ans;
    return t;
}
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        //step1
        //find mid so we can break ll into two halves
        ListNode *mid=findmid(head);
        //step2 make two list
        ListNode *left=head;
        ListNode *right=mid->next;
        mid->next=NULL;
        left=sortList(left);
        right=sortList(right);
        //step 3 we need to merge both the lists
        ListNode *ans=merge(left,right);
        return ans;
    }
};
